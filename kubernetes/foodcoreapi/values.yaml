replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:

  create: true

  automount: true

  annotations: {}

  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}

securityContext:
  {}

service:
  type: ClusterIP
  port: 80

ingress:
  name: ingress
  enabled: true
  className: "nginx"
  annotations: {
  }
  hosts:
    - host: "replaced"

  tls: []

ingress-nginx:
  controller:
    service:
      annotations:
        service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
        service.beta.kubernetes.io/azure-load-balancer-internal: "true"
        service.beta.kubernetes.io/azure-load-balancer-ipv4: "replaced"

resources:
  {}

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

volumes: []

volumeMounts: []

nodeSelector: {}

tolerations: []

affinity: {}

api:
  name: api

  replicaCount: 1

  image:
    repository: "replaced"
    tag: "replaced"

  ports:
    port: 9090
    name: http

  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 900m
      memory: 1024Mi

  ingress:
    path: "replaced"
    pathType: Prefix

  mercadoPago:
    baseUrl: "replaced"
    token: "replaced"
    userId: "replaced"
    posId: "replaced"
    notificationUrl: "replaced"

  server:
    address: 0.0.0.0
    port: 9090
    profilesActive: "prod"

  azure:
    blob:
      connectionString: "replaced"
      containerName: "replaced"

  auth:
    jwt:
      secret: "replaced"
      expirationTime: "replaced"

  hpa:
    minReplicas: 1
    maxReplicas: 3
    cpu:
      utilization:
        averageUtilization: 70

postgresql:
  name: "postgresql"

  replicaCount: 1
  port: 5432
  image:
    repository: postgres
    tag: "16.1"
    pullPolicy: IfNotPresent

  storageSize: 10Gi

  volumes:
    postgrevolume:
      dataFolder: pgdata
      mountPath: /var/lib/postgresql/data

  config:
    maxConnections: 100
    sharedBuffers: "128MB"

  resources:
    requests:
      cpu: "100m"
      memory: "512Mi"
    limits:
      cpu: "200m"
      memory: "1024Mi"

  auth:
    username: "replaced"
    password: "replaced"
    url: "replaced"

adminer:
  name: "adminer"

  replicaCount: 1

  image:
    repository: adminer
    tag: latest
    pullPolicy: IfNotPresent

  ports:
    port: 8080
    name: adminer
    protocol: TCP

  design: "pepa-linha"

  resources:
    requests:
      cpu: "10m"
      memory: "32Mi"
    limits:
      cpu: "20m"
      memory: "100Mi"

  ingress:
    path: /adminer
    pathType: Prefix

# EFK

elasticsearch:
  name: "elasticsearch"

  replicaCount: 1

  image:
    repository: docker.elastic.co/elasticsearch/elasticsearch
    tag: "8.13.4"

  resources:
    requests:
      cpu: "200m"
      memory: "512Mi"
    limits:
      cpu: "400m"
      memory: "1524Mi"

  clusterName: k8s-logs
  javaOpts: "-Xms512m -Xmx512m"
  discoveryType: "single-node"
  sslEnabled: false

  storageSize: 3Gi

  volumes:
    elasticvolume:
      mountPath: /var/lib/elasticsearch/data

  ports:
    rest: 9200
    interNode: 9300
    nameApi: rest
    nameInternal: inter-node

  vm:
    max_map_count: 262144

fluentd:
  name: fluentd

  image:
    repository: fluent/fluentd-kubernetes-daemonset
    tag: v1.18-debian-elasticsearch8-1

  elasticsearch:
    scheme: "http"

  systemdConf: "disable"
  containerTailParserType: "cri"
  skipLabels: true

  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 200m
      memory: 1024Mi

  volumes:
    varlog:
      name: varlog
      hostPath: /var/log
      mountPath: /var/log

kibana:
  name: kibana

  replicaCount: 1

  image:
    repository: docker.elastic.co/kibana/kibana
    tag: "8.13.4"

  ports:
    port: 5601
    name: http

  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 200m
      memory: 1024Mi

  volumes:
    kibanaconfig:
      name: kibana-config
      mountPath: /usr/share/kibana/config/kibana.yml
      subPath: kibana.yml

  ingress:
    path: /kibana
    pathType: Prefix

  serverRewriteBasePath: true
  serverHost: "0.0.0.0"


storageClass:
  name: azure-disk
  skuName: Standard_LRS
  kind: Managed
  cachingMode: ReadOnly
  reclaimPolicy: Delete
  volumeBindingMode: WaitForFirstConsumer
  allowVolumeExpansion: true
  fsType: ext4

namespace:
  efk:
    name: efk
  api:
    name: api
