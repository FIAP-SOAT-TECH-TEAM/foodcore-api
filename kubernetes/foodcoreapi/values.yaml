# Default values for foodcoreapi.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  name: ingress
  enabled: true
  className: "nginx"
  annotations: {
  }
  hosts:
    - host: foodcoreapi.eastus.cloudapp.azure.com

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

ingress-nginx:
  controller:
    service:
      annotations:
        service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: /healthz
        service.beta.kubernetes.io/azure-load-balancer-resource-group: tc2
      loadBalancerIP: 40.88.28.209

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

api:
  name: api

  replicaCount: 1

  image:
    repository: ferrarezzodev/foodcoreapi-monolito-cleanarch
    tag: latest

  ports:
    port: 9090
    name: http

  resources:
    limits:
      cpu: 1000m
    requests:
      cpu: 100m

  ingress:
    path: /api
    pathType: Prefix

  mercadoPago:
    baseUrl: https://api.mercadopago.com
    token: APP_USR-6067894635102235-051018-411ad7e519a24f5652d328ba205a2b9a-2430659417
    userId: "2430659417"
    posId: POCMP001POS001

  server:
    port: 9090
    profilesActive: "prod"

  azure:
    blob:
      connectionString: DefaultEndpointsProtocol=https;AccountName=fastfoodcoreapi;AccountKey=zdptHpyapo/jatHe2DdaajF1zUv7UzC6T81NAWtKCHoEL4NJNOEqiJ7iFxyjutnaAwlUL5i7Ri4P+ASt9KfI4g==;EndpointSuffix=core.windows.net
      containerName: images

  auth:
    jwt:
      secret: UOskZ5mykjrhRU8aHuT0sKaOj8Q9i+l6nFZzdpICF0zTSHi8PnbTQtUnKI6mUlNMrSdfQUpN59oWddOc4S3DXQ==
      expirationTime: "10"

  hpa:
    minReplicas: 1
    maxReplicas: 5
    cpu:
      utilization:
        averageUtilization: 30

postgresql:
  name: "postgresql"

  replicaCount: 1
  port: 5432
  image:
    repository: postgres
    tag: "16.1"
    pullPolicy: IfNotPresent

  storageSize: 10Gi

  volumes:
    postgrevolume:
      dataFolder: pgdata
      mountPath: /var/lib/postgresql/data

  config:
    maxConnections: 100
    sharedBuffers: "128MB"

  resources:
    limits:
      cpu: "1000m"
    requests:
      cpu: "100m"

  auth:
    username: "postgres"
    password: "postgres"
    database: "fastfood"

adminer:
  name: "adminer"

  replicaCount: 1

  image:
    repository: adminer
    tag: latest
    pullPolicy: IfNotPresent

  ports:
    port: 8080
    name: adminer
    protocol: TCP

  design: "pepa-linha"

  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "100Mi"
      cpu: "70m"

  ingress:
    path: /adminer
    pathType: Prefix

# EFK

elasticsearch:
  name: "elasticsearch"

  replicaCount: 1

  image:
    repository: docker.elastic.co/elasticsearch/elasticsearch
    tag: "8.13.4"

  resources:
    limits:
      cpu: "1000m"
    requests:
      cpu: "100m"

  clusterName: k8s-logs
  javaOpts: "-Xms512m -Xmx512m"
  discoveryType: "single-node"
  sslEnabled: false

  storageSize: 3Gi

  volumes:
    elasticvolume:
      mountPath: /var/lib/elasticsearch/data

  ports:
    rest: 9200
    interNode: 9300
    nameApi: rest
    nameInternal: inter-node

  vm:
    max_map_count: 262144

fluentd:
  name: fluentd

  image:
    repository: fluent/fluentd-kubernetes-daemonset
    tag: v1.18-debian-elasticsearch8-1

  elasticsearch:
    scheme: "http"

  systemdConf: "disable"
  containerTailParserType: "cri"
  skipLabels: true

  resources:
    limits:
      memory: 512Mi
      cpu: 200m
    requests:
      cpu: 100m
      memory: 200Mi

  volumes:
    varlog:
      name: varlog
      hostPath: /var/log
      mountPath: /var/log

kibana:
  name: kibana

  replicaCount: 1

  image:
    repository: docker.elastic.co/kibana/kibana
    tag: "8.13.4"

  ports:
    port: 5601
    name: http

  resources:
    limits:
      cpu: 500m
    requests:
      cpu: 100m

  volumes:
    kibanaconfig:
      name: kibana-config
      mountPath: /usr/share/kibana/config/kibana.yml
      subPath: kibana.yml

  ingress:
    path: /kibana
    pathType: Prefix

  serverRewriteBasePath: true
  serverHost: "0.0.0.0"


storageClass:
  name: azure-disk
  skuName: Standard_LRS
  kind: Managed
  cachingMode: ReadOnly
  reclaimPolicy: Delete
  volumeBindingMode: WaitForFirstConsumer
  allowVolumeExpansion: true
  fsType: ext4
