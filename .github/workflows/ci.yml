name: CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"
          cache: gradle

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Execute Spotless Apply
        run: ./gradlew spotlessApply

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Test with Gradle
        run: ./gradlew test jacocoTestReport

      - name: Build and analyze with SonarCloud
        run: |
          ./gradlew sonar \
            -Dsonar.projectKey="$SONAR_CLOUD_PROJ_KEY" \
            -Dsonar.organization="$SONAR_CLOUD_ORG_KEY" \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.token="$SONAR_CLOUD_TOKEN" \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
            -Dsonar.qualitygate.wait=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_CLOUD_ORG_KEY: ${{ secrets.SONAR_CLOUD_ORG_KEY }}
          SONAR_CLOUD_PROJ_KEY: ${{ secrets.SONAR_CLOUD_PROJ_KEY }}
          SONAR_CLOUD_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}

  push:
    needs: build
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id: ${{secrets.AZURE_SUBSCRIPTION_ID}}
      TF_VAR_foodcore-infra-rs-resource-group: ${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}
      TF_VAR_foodcore-infra-rs-storage-account: ${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}
      TF_VAR_foodcore-infra-rs-container: ${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}
      TF_VAR_foodcore-infra-rs-key: ${{secrets.FOODCORE_INFRA_BACKEND_AZURE_KEY}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Login Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.0

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" \
            -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
            -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}" \
            -backend-config="key=${{secrets.BACKEND_AZURE_KEY}}"

      - name: Terraform Refresh
        working-directory: terraform
        run: terraform refresh -no-color

      - name: Get ACR Login Server from remote state
        id: acr
        working-directory: terraform
        run: |
          echo "ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server_from_remote)" >> $GITHUB_OUTPUT

      - name: Docker Login to ACR
        run: |
          az acr login --name ${{ steps.acr.outputs.ACR_LOGIN_SERVER }}

      - name: Helm Login to ACR
        run: |
          ACR_LOGIN_SERVER=${{ steps.acr.outputs.ACR_LOGIN_SERVER }}
          ACR_USERNAME=$(az acr credential show --name ${ACR_LOGIN_SERVER} --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${ACR_LOGIN_SERVER} --query "passwords[0].value" -o tsv)
          echo $ACR_PASSWORD | helm registry login $ACR_LOGIN_SERVER --username $ACR_USERNAME --password-stdin

      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ steps.acr.outputs.ACR_LOGIN_SERVER }}/foodcoreapi:latest
          docker build -t $IMAGE_NAME -f docker/Dockerfile .
          docker push $IMAGE_NAME

      - name: Build and Push Package Helm Chart
        run: |
          helm dependency update kubernetes/foodcoreapi
          helm package kubernetes/foodcoreapi -d ./charts
          ACR_NAME=${{ steps.acr.outputs.ACR_LOGIN_SERVER }}
          helm push ./charts/foodcoreapi-*.tgz oci://$ACR_NAME/helm
