services:
  # Aplicação principal
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: food-core-api
    ports:
      - "8083:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/fastfood
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=validate
      - SPRING_LIQUIBASE_ENABLED=true
      - SPRING_LIQUIBASE_CHANGE_LOG=classpath:db/changelog/db.changelog-master.yaml
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - APP_CDN_ROOT_PATH=/app/cdn
      - APP_CDN_PUBLIC_URL=http://cdn:80
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fastfood-network
    # Limite de recursos para evitar consumo excessivo
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    volumes:
      - cdn_data:/app/cdn

  # Banco de dados PosgreSQL
  db:
    image: postgres:16-alpine
    container_name: food-core-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fastfood
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    command: >
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=512MB
      -c maintenance_work_mem=64MB
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c wal_level=logical
    networks:
      - fastfood-network

  # Redis para cache
  redis:
    image: redis:7-alpine
    container_name: food-core-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    command: redis-server --appendonly yes
    networks:
      - fastfood-network

  # Ferramenta para gerenciar banco de dados (aepnas local)
  adminer:
    image: adminer:latest
    container_name: food-core-adminer
    ports:
      - "8081:8080"
    depends_on:
      - db
    networks:
      - fastfood-network
    restart: unless-stopped
    profiles:
      - local

  # CDN para armazenamento de imagens de produtos
  cdn:
    image: nginx:alpine
    container_name: food-core-cdn
    ports:
      - "8082:80"
    volumes:
      - ./cdn/nginx.conf:/etc/nginx/nginx.conf:ro
      - cdn_data:/usr/share/nginx/html
      - ./cdn/public:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "http://localhost/healthcheck", "-q"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - fastfood-network

networks:
  fastfood-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  cdn_data: